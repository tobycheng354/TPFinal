import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import matplotlib as mpl
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import statistics
import matplotlib.colors as colors
import matplotlib as mpl
import matplotlib.font_manager as font_manager
import random

plt.style.use('default')
mpl.rcParams['font.family']='serif'
cmfont = font_manager.FontProperties(fname=mpl.get_data_path() + '/fonts/ttf/cmr10.ttf')
mpl.rcParams['font.serif']=cmfont.get_name()
mpl.rcParams['mathtext.fontset']='cm'
mpl.rcParams['axes.unicode_minus']=False
mpl.rcParams['axes.linewidth'] = 1


data2 = pd.read_csv("~/Desktop/Technical Project/Data/ResultsCourse.csv")
HVI2 = data2['HorizontalVelIn']
VVI2 = data2['VerticalVelIn']
SI2 = data2['SpinIn']
HVO2 = data2['HorizontalVelOut']
VVO2 = data2['VerticalVelOut']
SO2 = data2['SpinOut']
n2 = len(data2)


idxs2 = [320, 267, 423]        
cmap = mpl.cm.get_cmap('viridis')
c1 = cmap(0)
c2 = cmap(0.5)
c3 = cmap(0.99)

output_x_velocities2 = [-2.29, 5.598126, 0.77752]
output_y_velocities2 = [1.048431, 1.153652, 0.93765]
output_a_velocities2 = [225.420, -251.424491, 606.1010146]
truevals_x = [HVO2[idxs2[0]], HVO2[idxs2[1]], HVO2[idxs2[2]]]
truevals_y = [VVO2[idxs2[0]], VVO2[idxs2[1]], VVO2[idxs2[2]]]
truevals_a = [SO2[idxs2[0]], SO2[idxs2[1]], SO2[idxs2[2]]]

MSD_x1 = mean_squared_error(truevals_x, output_x_velocities2, squared = False)/abs(statistics.mean(truevals_x))
MSD_y1 = mean_squared_error(truevals_y, output_y_velocities2, squared = False)/abs(statistics.mean(truevals_y))
MSD_a1 = mean_squared_error(truevals_a, output_a_velocities2, squared = False)/abs(statistics.mean(truevals_a))
print(str(MSD_x1)[:6],str(MSD_y1)[:6], str(MSD_a1)[:6])



def traj_r(ix, iy):
    sx = []
    sy = []
    time = np.linspace(0, 3, 10000)
    for t in time: 
        sy.append((iy*t) + (0.5 * -9.81 * t * t))
        sx.append(ix*t)
        if sy[-1] < 0:
            break
    return sx, sy


c2traj1_x, c2traj1_y = traj_r(HVO2[idxs2[0]], VVO2[idxs2[0]])
c2traj2_x, c2traj2_y = traj_r(HVO2[idxs2[1]], VVO2[idxs2[1]])
c2traj3_x, c2traj3_y = traj_r(HVO2[idxs2[2]], VVO2[idxs2[2]])


c2traj1_x_pred, c2traj1_y_pred = traj_r(output_x_velocities2[0], output_y_velocities2[0])
c2traj2_x_pred, c2traj2_y_pred = traj_r(output_x_velocities2[1], output_y_velocities2[1])
c2traj3_x_pred, c2traj3_y_pred = traj_r(output_x_velocities2[2], output_y_velocities2[2])

print((str(abs((output_x_velocities2[0])-(HVO2[idxs2[0]]))))[:5])
print((str(abs((output_x_velocities2[1])-(HVO2[idxs2[1]]))))[:5])
print((str(abs((output_x_velocities2[2])-(HVO2[idxs2[2]]))))[:5])

print((str(abs((output_y_velocities2[0])-(VVO2[idxs2[0]]))))[:5])
print((str(abs((output_y_velocities2[1])-(VVO2[idxs2[1]]))))[:5])
print((str(abs((output_y_velocities2[2])-(VVO2[idxs2[2]]))))[:5])

print((str(abs((output_a_velocities2[0])-(SO2[idxs2[0]]))))[:5])
print((str(abs((output_a_velocities2[1])-(SO2[idxs2[1]]))))[:5])
print((str(abs((output_a_velocities2[2])-(SO2[idxs2[2]]))))[:5])


fig, axs = plt.subplots(1,1,figsize=(15, 15))
line_width = 5
line_width_pred = 4
alpha_pred = 0.5
ls_pred = "--"
label_size = 20
tick_size = 15

axs.set_xlim(-0.25, 0.25)
axs.set_ylim(0, 0.5)
axs.plot(c2traj1_x, c2traj1_y, color = c1, lw = line_width, label = "Simulation 1.")
axs.plot(c2traj2_x, c2traj2_y, color = c2, lw = line_width, label = "Simulation 2.")
axs.plot(c2traj3_x, c2traj3_y, color = c3, lw = line_width, label = "Simulation 3.")
axs.plot(c2traj1_x_pred, c2traj1_y_pred, color = c1, lw = line_width_pred, alpha = alpha_pred, ls = ls_pred)
axs.plot(c2traj2_x_pred, c2traj2_y_pred, color = c2, lw = line_width_pred, alpha = alpha_pred, ls = ls_pred)
axs.plot(c2traj3_x_pred, c2traj3_y_pred, color = c3, lw = line_width_pred, alpha = alpha_pred, ls = ls_pred)
axs.legend(loc = "upper left", prop={'size': 15})
axs.set_ylabel("Vertical Displacement "+r"$(m)$", fontsize = label_size)
axs.set_xlabel("Horizontal Displacement "+r"$(m)$", fontsize = label_size)
axs.tick_params(axis='both', which='major', labelsize=tick_size)
axs.set_box_aspect(1)
